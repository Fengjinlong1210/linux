exit 和_exit 接口
_exit接口是系统提供的系统调用接口，exit在底层也会使用_exit
在使用_exit之前，还会执行清理函数，关闭所有打开的流，所有的缓存数据被写入（例如缓冲区）

fork函数调用后：
1.给子进程分配内存块(pcb)和内核数据结构
2.将父进程部分数据结构拷贝至子进程
3.将子进程添加到系统进程列表中
4.fork返回
fork执行后，父子进程同时进行，谁先运行由调度器决定

写时拷贝：当父子进程时图改变数据时，拷贝一份临时副本用于修改，然后改变页表的映射关系
	使页表映射临时开辟的副本


进程终止
通过echo &? 查看进程退出码
ctrl + c 信号终止

进程终止方法
1.return n;
2.exit(n);   //执行return n等同于exit(n)
3._exit


进程等待
	为什么要进行进程等待
	1.获取子进程推出结果
	2.处理子进程退出后的僵尸进程状态，防止内存泄漏
	3.回收子进程资源和退出状态

	获取进程等待的结果
	#include <sys/types.h>
	#include <sys/wait.h>

	1.pid_t wait(int* status);
		status是一个输出型参数，用来获取子进程退出码
	2.pid_t waitpid(pid_t pid, int* status, int options);
		pid如果为-1，则等待任意一个子进程
		pid如果>0,就等待这个子进程
	waitpid的返回值：如果等待成功，就返回子进程pid
                    如果设置了WNOHANG，而没有可回收的子进程，就返回0
                    如果出现错误，就会返回-1

		options如果是WNOHANG，就直接返回0，不会进行等待
        如果设置options为0，父进程会阻塞等待子进程结束

	如果子进程已经退出，调用wait函数会立即返回，并释放资源，并获得进程退出信息
	如果子进程还在运行，则调用wait可能会进程堵塞，等待子进程完成后获得结果
	如果子进程不存在，就会出错返回


